import "./chunk-FAW2VN4A.js";

// node_modules/selector-set/selector-set.next.js
function SelectorSet() {
  if (!(this instanceof SelectorSet)) {
    return new SelectorSet();
  }
  this.size = 0;
  this.uid = 0;
  this.selectors = [];
  this.selectorObjects = {};
  this.indexes = Object.create(this.indexes);
  this.activeIndexes = [];
}
var docElem = window.document.documentElement;
var matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector;
SelectorSet.prototype.matchesSelector = function(el, selector) {
  return matches.call(el, selector);
};
SelectorSet.prototype.querySelectorAll = function(selectors, context) {
  return context.querySelectorAll(selectors);
};
SelectorSet.prototype.indexes = [];
var idRe = /^#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: "ID",
  selector: function matchIdSelector(sel) {
    var m;
    if (m = sel.match(idRe)) {
      return m[0].slice(1);
    }
  },
  element: function getElementId(el) {
    if (el.id) {
      return [el.id];
    }
  }
});
var classRe = /^\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: "CLASS",
  selector: function matchClassSelector(sel) {
    var m;
    if (m = sel.match(classRe)) {
      return m[0].slice(1);
    }
  },
  element: function getElementClassNames(el) {
    var className = el.className;
    if (className) {
      if (typeof className === "string") {
        return className.split(/\s/);
      } else if (typeof className === "object" && "baseVal" in className) {
        return className.baseVal.split(/\s/);
      }
    }
  }
});
var tagRe = /^((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: "TAG",
  selector: function matchTagSelector(sel) {
    var m;
    if (m = sel.match(tagRe)) {
      return m[0].toUpperCase();
    }
  },
  element: function getElementTagName(el) {
    return [el.nodeName.toUpperCase()];
  }
});
SelectorSet.prototype.indexes["default"] = {
  name: "UNIVERSAL",
  selector: function() {
    return true;
  },
  element: function() {
    return [true];
  }
};
var Map;
if (typeof window.Map === "function") {
  Map = window.Map;
} else {
  Map = function() {
    function Map2() {
      this.map = {};
    }
    Map2.prototype.get = function(key) {
      return this.map[key + " "];
    };
    Map2.prototype.set = function(key, value) {
      this.map[key + " "] = value;
    };
    return Map2;
  }();
}
var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g;
function parseSelectorIndexes(allIndexes, selector) {
  allIndexes = allIndexes.slice(0).concat(allIndexes["default"]);
  var allIndexesLen = allIndexes.length, i, j, m, dup, rest = selector, key, index, indexes = [];
  do {
    chunker.exec("");
    if (m = chunker.exec(rest)) {
      rest = m[3];
      if (m[2] || !rest) {
        for (i = 0; i < allIndexesLen; i++) {
          index = allIndexes[i];
          if (key = index.selector(m[1])) {
            j = indexes.length;
            dup = false;
            while (j--) {
              if (indexes[j].index === index && indexes[j].key === key) {
                dup = true;
                break;
              }
            }
            if (!dup) {
              indexes.push({ index, key });
            }
            break;
          }
        }
      }
    }
  } while (m);
  return indexes;
}
function findByPrototype(ary, proto) {
  var i, len, item;
  for (i = 0, len = ary.length; i < len; i++) {
    item = ary[i];
    if (proto.isPrototypeOf(item)) {
      return item;
    }
  }
}
SelectorSet.prototype.logDefaultIndexUsed = function() {
};
SelectorSet.prototype.add = function(selector, data) {
  var obj, i, indexProto, key, index, objs, selectorIndexes, selectorIndex, indexes = this.activeIndexes, selectors = this.selectors, selectorObjects = this.selectorObjects;
  if (typeof selector !== "string") {
    return;
  }
  obj = {
    id: this.uid++,
    selector,
    data
  };
  selectorObjects[obj.id] = obj;
  selectorIndexes = parseSelectorIndexes(this.indexes, selector);
  for (i = 0; i < selectorIndexes.length; i++) {
    selectorIndex = selectorIndexes[i];
    key = selectorIndex.key;
    indexProto = selectorIndex.index;
    index = findByPrototype(indexes, indexProto);
    if (!index) {
      index = Object.create(indexProto);
      index.map = new Map();
      indexes.push(index);
    }
    if (indexProto === this.indexes["default"]) {
      this.logDefaultIndexUsed(obj);
    }
    objs = index.map.get(key);
    if (!objs) {
      objs = [];
      index.map.set(key, objs);
    }
    objs.push(obj);
  }
  this.size++;
  selectors.push(selector);
};
SelectorSet.prototype.remove = function(selector, data) {
  if (typeof selector !== "string") {
    return;
  }
  var selectorIndexes, selectorIndex, i, j, k, selIndex, objs, obj, indexes = this.activeIndexes, selectors = this.selectors = [], selectorObjects = this.selectorObjects, removedIds = {}, removeAll = arguments.length === 1;
  selectorIndexes = parseSelectorIndexes(this.indexes, selector);
  for (i = 0; i < selectorIndexes.length; i++) {
    selectorIndex = selectorIndexes[i];
    j = indexes.length;
    while (j--) {
      selIndex = indexes[j];
      if (selectorIndex.index.isPrototypeOf(selIndex)) {
        objs = selIndex.map.get(selectorIndex.key);
        if (objs) {
          k = objs.length;
          while (k--) {
            obj = objs[k];
            if (obj.selector === selector && (removeAll || obj.data === data)) {
              objs.splice(k, 1);
              removedIds[obj.id] = true;
            }
          }
        }
        break;
      }
    }
  }
  for (i in removedIds) {
    delete selectorObjects[i];
    this.size--;
  }
  for (i in selectorObjects) {
    selectors.push(selectorObjects[i].selector);
  }
};
function sortById(a, b) {
  return a.id - b.id;
}
SelectorSet.prototype.queryAll = function(context) {
  if (!this.selectors.length) {
    return [];
  }
  var matches2 = {}, results = [];
  var els = this.querySelectorAll(this.selectors.join(", "), context);
  var i, j, len, len2, el, m, match, obj;
  for (i = 0, len = els.length; i < len; i++) {
    el = els[i];
    m = this.matches(el);
    for (j = 0, len2 = m.length; j < len2; j++) {
      obj = m[j];
      if (!matches2[obj.id]) {
        match = {
          id: obj.id,
          selector: obj.selector,
          data: obj.data,
          elements: []
        };
        matches2[obj.id] = match;
        results.push(match);
      } else {
        match = matches2[obj.id];
      }
      match.elements.push(el);
    }
  }
  return results.sort(sortById);
};
SelectorSet.prototype.matches = function(el) {
  if (!el) {
    return [];
  }
  var i, j, k, len, len2, len3, index, keys, objs, obj, id;
  var indexes = this.activeIndexes, matchedIds = {}, matches2 = [];
  for (i = 0, len = indexes.length; i < len; i++) {
    index = indexes[i];
    keys = index.element(el);
    if (keys) {
      for (j = 0, len2 = keys.length; j < len2; j++) {
        if (objs = index.map.get(keys[j])) {
          for (k = 0, len3 = objs.length; k < len3; k++) {
            obj = objs[k];
            id = obj.id;
            if (!matchedIds[id] && this.matchesSelector(el, obj.selector)) {
              matchedIds[id] = true;
              matches2.push(obj);
            }
          }
        }
      }
    }
  }
  return matches2.sort(sortById);
};

// node_modules/@unseenco/e/src/utils.js
var eventTypes = {};
var listeners = {};
var nonBubblers = ["mouseenter", "mouseleave", "pointerenter", "pointerleave"];
function makeBusStack(event) {
  if (listeners[event] === void 0) {
    listeners[event] = [];
  }
}
function triggerBus(event, args) {
  if (listeners[event]) {
    for (let i = 0; i < listeners[event].length; i++) {
      listeners[event][i](...args);
    }
  }
}
function maybeRunQuerySelector(el) {
  return typeof el === "string" ? document.querySelectorAll(el) : el;
}
function handleDelegation(e) {
  let matches2 = traverse(eventTypes[e.type], e.target);
  if (matches2.length) {
    for (let i = 0; i < matches2.length; i++) {
      for (let i2 = 0; i2 < matches2[i].stack.length; i2++) {
        if (nonBubblers.indexOf(e.type) !== -1) {
          addDelegateTarget(e, matches2[i].delegatedTarget);
          if (e.target === matches2[i].delegatedTarget) {
            matches2[i].stack[i2].data(e);
          }
        } else {
          addDelegateTarget(e, matches2[i].delegatedTarget);
          matches2[i].stack[i2].data(e);
        }
      }
    }
  }
}
function traverse(listeners2, target) {
  const queue = [];
  let node = target;
  do {
    if (node.nodeType !== 1) {
      break;
    }
    const matches2 = listeners2.matches(node);
    if (matches2.length) {
      queue.push({ delegatedTarget: node, stack: matches2 });
    }
  } while (node = node.parentElement);
  return queue;
}
function addDelegateTarget(event, delegatedTarget) {
  Object.defineProperty(event, "currentTarget", {
    configurable: true,
    enumerable: true,
    get: () => delegatedTarget
  });
}
function clone(object) {
  return JSON.parse(JSON.stringify(object));
}

// node_modules/@unseenco/e/src/e.js
var E = class {
  bindAll(context, methods) {
    if (!methods) {
      methods = Object.getOwnPropertyNames(Object.getPrototypeOf(context));
    }
    for (let i = 0; i < methods.length; i++) {
      context[methods[i]] = context[methods[i]].bind(context);
    }
  }
  on(event, el, callback, options) {
    const events = event.split(" ");
    for (let i = 0; i < events.length; i++) {
      if (typeof el === "function" && callback === void 0) {
        makeBusStack(events[i]);
        listeners[events[i]].push(el);
        continue;
      }
      if (el.nodeType && el.nodeType === 1 || el === window || el === document) {
        el.addEventListener(events[i], callback, options);
        continue;
      }
      el = maybeRunQuerySelector(el);
      for (let n = 0; n < el.length; n++) {
        el[n].addEventListener(events[i], callback, options);
      }
    }
  }
  delegate(event, delegate, callback) {
    const events = event.split(" ");
    for (let i = 0; i < events.length; i++) {
      let map = eventTypes[events[i]];
      if (map === void 0) {
        map = new SelectorSet();
        eventTypes[events[i]] = map;
        if (nonBubblers.indexOf(events[i]) !== -1) {
          document.addEventListener(events[i], handleDelegation, true);
        } else {
          document.addEventListener(events[i], handleDelegation);
        }
      }
      map.add(delegate, callback);
    }
  }
  off(event, el, callback, options) {
    const events = event.split(" ");
    for (let i = 0; i < events.length; i++) {
      if (el === void 0) {
        listeners[events[i]] = [];
        continue;
      }
      if (typeof el === "function") {
        makeBusStack(events[i]);
        for (let n = 0; n < listeners[events[i]].length; n++) {
          if (listeners[events[i]][n] === el) {
            listeners[events[i]].splice(n, 1);
          }
        }
        continue;
      }
      const map = eventTypes[events[i]];
      if (map !== void 0) {
        map.remove(el, callback);
        if (map.size === 0) {
          delete eventTypes[events[i]];
          if (nonBubblers.indexOf(events[i]) !== -1) {
            document.removeEventListener(events[i], handleDelegation, true);
          } else {
            document.removeEventListener(events[i], handleDelegation);
          }
          continue;
        }
      }
      if (el.removeEventListener !== void 0) {
        el.removeEventListener(events[i], callback, options);
        continue;
      }
      el = maybeRunQuerySelector(el);
      for (let n = 0; n < el.length; n++) {
        el[n].removeEventListener(events[i], callback, options);
      }
    }
  }
  emit(event, ...args) {
    triggerBus(event, args);
  }
  debugDelegated() {
    return clone(eventTypes);
  }
  debugBus() {
    return clone(listeners);
  }
};
var instance = new E();
var e_default = instance;

// dep:@unseenco_e
var unseenco_e_default = e_default;
export {
  unseenco_e_default as default
};
//# sourceMappingURL=@unseenco_e.js.map
